{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { searchFlight } from '../fn/flight/search-flight';\nimport { searchFlight$Plain } from '../fn/flight/search-flight-plain';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FlightService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchFlight()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFlight$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight$Plain$Response(params, context) {\n    return searchFlight$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFlight$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight$Plain(params, context) {\n    return this.searchFlight$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFlight()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight$Response(params, context) {\n    return searchFlight(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFlight$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight(params, context) {\n    return this.searchFlight$Response(params, context).pipe(map(r => r.body));\n  }\n}\nFlightService.SearchFlightPath = '/Flight';\nFlightService.ɵfac = function FlightService_Factory(t) {\n  return new (t || FlightService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nFlightService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlightService,\n  factory: FlightService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAK7C,SAASC,YAAY,QAAQ,4BAA4B;AAEzD,SAASC,kBAAkB,QAAQ,kCAAkC;;;;AAIrE,OAAM,MAAOC,aAAc,SAAQH,WAAW;EAC5CI,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,2BAA2B,CAACC,MAAkC,EAAEC,OAAqB;IACnF,OAAOP,kBAAkB,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACrE;EAEA;;;;;;EAMAP,kBAAkB,CAACM,MAAkC,EAAEC,OAAqB;IAC1E,OAAO,IAAI,CAACF,2BAA2B,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC3DZ,GAAG,CAAEa,CAAsC,IAAsBA,CAAC,CAACC,IAAI,CAAC,CACzE;EACH;EAEA;;;;;;EAMAC,qBAAqB,CAACN,MAA4B,EAAEC,OAAqB;IACvE,OAAOR,YAAY,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC/D;EAEA;;;;;;EAMAR,YAAY,CAACO,MAA4B,EAAEC,OAAqB;IAC9D,OAAO,IAAI,CAACK,qBAAqB,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACrDZ,GAAG,CAAEa,CAAsC,IAAsBA,CAAC,CAACC,IAAI,CAAC,CACzE;EACH;;AAlDWV,aAAc,CAMTY,gBAAgB,GAAG,SAAS;AANjCZ,aAAc;mBAAdA,aAAa;AAAA;AAAbA,aAAc;SAAdA,aAAa;EAAAa,SAAbb,aAAa;EAAAc,YADA;AAAM","names":["map","BaseService","searchFlight","searchFlight$Plain","FlightService","constructor","config","http","searchFlight$Plain$Response","params","context","rootUrl","pipe","r","body","searchFlight$Response","SearchFlightPath","factory","providedIn"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Projects/Flights/Flights/ClientApp/src/app/api/services/flight.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { FlightRm } from '../models/flight-rm';\nimport { searchFlight } from '../fn/flight/search-flight';\nimport { SearchFlight$Params } from '../fn/flight/search-flight';\nimport { searchFlight$Plain } from '../fn/flight/search-flight-plain';\nimport { SearchFlight$Plain$Params } from '../fn/flight/search-flight-plain';\n\n@Injectable({ providedIn: 'root' })\nexport class FlightService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `searchFlight()` */\n  static readonly SearchFlightPath = '/Flight';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFlight$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight$Plain$Response(params?: SearchFlight$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FlightRm>>> {\n    return searchFlight$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFlight$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight$Plain(params?: SearchFlight$Plain$Params, context?: HttpContext): Observable<Array<FlightRm>> {\n    return this.searchFlight$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFlight()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight$Response(params?: SearchFlight$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FlightRm>>> {\n    return searchFlight(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFlight$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFlight(params?: SearchFlight$Params, context?: HttpContext): Observable<Array<FlightRm>> {\n    return this.searchFlight$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}