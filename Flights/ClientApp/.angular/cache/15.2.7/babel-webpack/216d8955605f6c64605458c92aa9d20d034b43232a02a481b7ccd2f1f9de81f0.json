{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class BookingService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /**\n   * Path part for operation listBooking\n   */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listBooking$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking$Plain$Response(params) {\n    const rb = new RequestBuilder(this.rootUrl, BookingService.ListBookingPath, 'get');\n    if (params) {\n      rb.path('email', params.email, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain'\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `listBooking$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking$Plain(params) {\n    return this.listBooking$Plain$Response(params).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listBooking()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking$Response(params) {\n    const rb = new RequestBuilder(this.rootUrl, BookingService.ListBookingPath, 'get');\n    if (params) {\n      rb.path('email', params.email, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json'\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `listBooking$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking(params) {\n    return this.listBooking$Response(params).pipe(map(r => r.body));\n  }\n  /**\n   * Path part for operation cancelBooking\n   */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `cancelBooking()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  cancelBooking$Response(params) {\n    const rb = new RequestBuilder(this.rootUrl, BookingService.CancelBookingPath, 'delete');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `cancelBooking$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  cancelBooking(params) {\n    return this.cancelBooking$Response(params).pipe(map(r => r.body));\n  }\n}\nBookingService.ListBookingPath = '/Booking/{email}';\nBookingService.CancelBookingPath = '/Booking';\nBookingService.ɵfac = function BookingService_Factory(t) {\n  return new (t || BookingService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nBookingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookingService,\n  factory: BookingService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpResponse","BaseService","RequestBuilder","map","filter","BookingService","constructor","config","http","listBooking$Plain$Response","params","rb","rootUrl","ListBookingPath","path","email","request","build","responseType","accept","pipe","r","listBooking$Plain","body","listBooking$Response","listBooking","cancelBooking$Response","CancelBookingPath","clone","undefined","cancelBooking","factory","providedIn"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Projects/Flights/Flights/ClientApp/src/app/api/services/booking.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { BookDto } from '../models/book-dto';\nimport { BookingRm } from '../models/booking-rm';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BookingService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation listBooking\n   */\n  static readonly ListBookingPath = '/Booking/{email}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listBooking$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking$Plain$Response(params: {\n    email: string;\n  }): Observable<StrictHttpResponse<Array<BookingRm>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, BookingService.ListBookingPath, 'get');\n    if (params) {\n      rb.path('email', params.email, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<BookingRm>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `listBooking$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking$Plain(params: {\n    email: string;\n  }): Observable<Array<BookingRm>> {\n\n    return this.listBooking$Plain$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<BookingRm>>) => r.body as Array<BookingRm>)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listBooking()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking$Response(params: {\n    email: string;\n  }): Observable<StrictHttpResponse<Array<BookingRm>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, BookingService.ListBookingPath, 'get');\n    if (params) {\n      rb.path('email', params.email, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<BookingRm>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `listBooking$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking(params: {\n    email: string;\n  }): Observable<Array<BookingRm>> {\n\n    return this.listBooking$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<BookingRm>>) => r.body as Array<BookingRm>)\n    );\n  }\n\n  /**\n   * Path part for operation cancelBooking\n   */\n  static readonly CancelBookingPath = '/Booking';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `cancelBooking()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  cancelBooking$Response(params?: {\n    body?: BookDto\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, BookingService.CancelBookingPath, 'delete');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `cancelBooking$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  cancelBooking(params?: {\n    body?: BookDto\n  }): Observable<void> {\n\n    return this.cancelBooking$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}