{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { findPassenger } from '../fn/passenger/find-passenger';\nimport { findPassenger$Plain } from '../fn/passenger/find-passenger-plain';\nimport { registerPassenger } from '../fn/passenger/register-passenger';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class PassengerService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `registerPassenger()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `registerPassenger()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  registerPassenger$Response(params, context) {\n    return registerPassenger(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `registerPassenger$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  registerPassenger(params, context) {\n    return this.registerPassenger$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findPassenger()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findPassenger$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findPassenger$Plain$Response(params, context) {\n    return findPassenger$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findPassenger$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findPassenger$Plain(params, context) {\n    return this.findPassenger$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findPassenger()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findPassenger$Response(params, context) {\n    return findPassenger(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findPassenger$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findPassenger(params, context) {\n    return this.findPassenger$Response(params, context).pipe(map(r => r.body));\n  }\n}\nPassengerService.RegisterPassengerPath = '/Passenger';\nPassengerService.FindPassengerPath = '/Passenger/{email}';\nPassengerService.ɵfac = function PassengerService_Factory(t) {\n  return new (t || PassengerService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nPassengerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PassengerService,\n  factory: PassengerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,aAAa,QAAQ,gCAAgC;AAE9D,SAASC,mBAAmB,QAAQ,sCAAsC;AAG1E,SAASC,iBAAiB,QAAQ,oCAAoC;;;;AAItE,OAAM,MAAOC,gBAAiB,SAAQJ,WAAW;EAC/CK,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,0BAA0B,CAACC,MAAiC,EAAEC,OAAqB;IACjF,OAAOP,iBAAiB,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACpE;EAEA;;;;;;EAMAP,iBAAiB,CAACM,MAAiC,EAAEC,OAAqB;IACxE,OAAO,IAAI,CAACF,0BAA0B,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC1Db,GAAG,CAAEc,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;EAEA;;EAGA;;;;;;EAMAC,4BAA4B,CAACN,MAAkC,EAAEC,OAAqB;IACpF,OAAOR,mBAAmB,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACtE;EAEA;;;;;;EAMAR,mBAAmB,CAACO,MAAkC,EAAEC,OAAqB;IAC3E,OAAO,IAAI,CAACK,4BAA4B,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC5Db,GAAG,CAAEc,CAAkC,IAAkBA,CAAC,CAACC,IAAI,CAAC,CACjE;EACH;EAEA;;;;;;EAMAE,sBAAsB,CAACP,MAA4B,EAAEC,OAAqB;IACxE,OAAOT,aAAa,CAAC,IAAI,CAACM,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAChE;EAEA;;;;;;EAMAT,aAAa,CAACQ,MAA4B,EAAEC,OAAqB;IAC/D,OAAO,IAAI,CAACM,sBAAsB,CAACP,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACtDb,GAAG,CAAEc,CAAkC,IAAkBA,CAAC,CAACC,IAAI,CAAC,CACjE;EACH;;AA3EWV,gBAAiB,CAMZa,qBAAqB,GAAG,YAAY;AANzCb,gBAAiB,CA+BZc,iBAAiB,GAAG,oBAAoB;AA/B7Cd,gBAAiB;mBAAjBA,gBAAgB;AAAA;AAAhBA,gBAAiB;SAAjBA,gBAAgB;EAAAe,SAAhBf,gBAAgB;EAAAgB,YADH;AAAM","names":["map","BaseService","findPassenger","findPassenger$Plain","registerPassenger","PassengerService","constructor","config","http","registerPassenger$Response","params","context","rootUrl","pipe","r","body","findPassenger$Plain$Response","findPassenger$Response","RegisterPassengerPath","FindPassengerPath","factory","providedIn"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Projects/Flights/Flights/ClientApp/src/app/api/services/passenger.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { findPassenger } from '../fn/passenger/find-passenger';\nimport { FindPassenger$Params } from '../fn/passenger/find-passenger';\nimport { findPassenger$Plain } from '../fn/passenger/find-passenger-plain';\nimport { FindPassenger$Plain$Params } from '../fn/passenger/find-passenger-plain';\nimport { PassengerRm } from '../models/passenger-rm';\nimport { registerPassenger } from '../fn/passenger/register-passenger';\nimport { RegisterPassenger$Params } from '../fn/passenger/register-passenger';\n\n@Injectable({ providedIn: 'root' })\nexport class PassengerService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `registerPassenger()` */\n  static readonly RegisterPassengerPath = '/Passenger';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `registerPassenger()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  registerPassenger$Response(params?: RegisterPassenger$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return registerPassenger(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `registerPassenger$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  registerPassenger(params?: RegisterPassenger$Params, context?: HttpContext): Observable<void> {\n    return this.registerPassenger$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n  /** Path part for operation `findPassenger()` */\n  static readonly FindPassengerPath = '/Passenger/{email}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findPassenger$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findPassenger$Plain$Response(params: FindPassenger$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<PassengerRm>> {\n    return findPassenger$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findPassenger$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findPassenger$Plain(params: FindPassenger$Plain$Params, context?: HttpContext): Observable<PassengerRm> {\n    return this.findPassenger$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<PassengerRm>): PassengerRm => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findPassenger()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findPassenger$Response(params: FindPassenger$Params, context?: HttpContext): Observable<StrictHttpResponse<PassengerRm>> {\n    return findPassenger(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findPassenger$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findPassenger(params: FindPassenger$Params, context?: HttpContext): Observable<PassengerRm> {\n    return this.findPassenger$Response(params, context).pipe(\n      map((r: StrictHttpResponse<PassengerRm>): PassengerRm => r.body)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}