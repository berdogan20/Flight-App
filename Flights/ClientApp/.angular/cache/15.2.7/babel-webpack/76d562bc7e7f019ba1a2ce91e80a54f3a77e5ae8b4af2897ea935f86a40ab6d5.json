{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { cancelBooking } from '../fn/booking/cancel-booking';\nimport { listBooking } from '../fn/booking/list-booking';\nimport { listBooking$Plain } from '../fn/booking/list-booking-plain';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class BookingService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `listBooking()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listBooking$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking$Plain$Response(params, context) {\n    return listBooking$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `listBooking$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking$Plain(params, context) {\n    return this.listBooking$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listBooking()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking$Response(params, context) {\n    return listBooking(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `listBooking$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking(params, context) {\n    return this.listBooking$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `cancelBooking()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `cancelBooking()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cancelBooking$Response(params, context) {\n    return cancelBooking(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `cancelBooking$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cancelBooking(params, context) {\n    return this.cancelBooking$Response(params, context).pipe(map(r => r.body));\n  }\n}\nBookingService.ListBookingPath = '/Booking/{email}';\nBookingService.CancelBookingPath = '/Booking';\nBookingService.ɵfac = function BookingService_Factory(t) {\n  return new (t || BookingService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nBookingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookingService,\n  factory: BookingService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAK7C,SAASC,aAAa,QAAQ,8BAA8B;AAE5D,SAASC,WAAW,QAAQ,4BAA4B;AAExD,SAASC,iBAAiB,QAAQ,kCAAkC;;;;AAIpE,OAAM,MAAOC,cAAe,SAAQJ,WAAW;EAC7CK,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,0BAA0B,CAACC,MAAgC,EAAEC,OAAqB;IAChF,OAAOP,iBAAiB,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACpE;EAEA;;;;;;EAMAP,iBAAiB,CAACM,MAAgC,EAAEC,OAAqB;IACvE,OAAO,IAAI,CAACF,0BAA0B,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC1Db,GAAG,CAAEc,CAAuC,IAAuBA,CAAC,CAACC,IAAI,CAAC,CAC3E;EACH;EAEA;;;;;;EAMAC,oBAAoB,CAACN,MAA0B,EAAEC,OAAqB;IACpE,OAAOR,WAAW,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC9D;EAEA;;;;;;EAMAR,WAAW,CAACO,MAA0B,EAAEC,OAAqB;IAC3D,OAAO,IAAI,CAACK,oBAAoB,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACpDb,GAAG,CAAEc,CAAuC,IAAuBA,CAAC,CAACC,IAAI,CAAC,CAC3E;EACH;EAEA;;EAGA;;;;;;EAMAE,sBAAsB,CAACP,MAA6B,EAAEC,OAAqB;IACzE,OAAOT,aAAa,CAAC,IAAI,CAACM,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAChE;EAEA;;;;;;EAMAT,aAAa,CAACQ,MAA6B,EAAEC,OAAqB;IAChE,OAAO,IAAI,CAACM,sBAAsB,CAACP,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACtDb,GAAG,CAAEc,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;;AA3EWV,cAAe,CAMVa,eAAe,GAAG,kBAAkB;AANzCb,cAAe,CAqDVc,iBAAiB,GAAG,UAAU;AArDnCd,cAAe;mBAAfA,cAAc;AAAA;AAAdA,cAAe;SAAfA,cAAc;EAAAe,SAAdf,cAAc;EAAAgB,YADD;AAAM","names":["map","BaseService","cancelBooking","listBooking","listBooking$Plain","BookingService","constructor","config","http","listBooking$Plain$Response","params","context","rootUrl","pipe","r","body","listBooking$Response","cancelBooking$Response","ListBookingPath","CancelBookingPath","factory","providedIn"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Projects/Flights/Flights/ClientApp/src/app/api/services/booking.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { BookingRm } from '../models/booking-rm';\nimport { cancelBooking } from '../fn/booking/cancel-booking';\nimport { CancelBooking$Params } from '../fn/booking/cancel-booking';\nimport { listBooking } from '../fn/booking/list-booking';\nimport { ListBooking$Params } from '../fn/booking/list-booking';\nimport { listBooking$Plain } from '../fn/booking/list-booking-plain';\nimport { ListBooking$Plain$Params } from '../fn/booking/list-booking-plain';\n\n@Injectable({ providedIn: 'root' })\nexport class BookingService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `listBooking()` */\n  static readonly ListBookingPath = '/Booking/{email}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listBooking$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking$Plain$Response(params: ListBooking$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BookingRm>>> {\n    return listBooking$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `listBooking$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking$Plain(params: ListBooking$Plain$Params, context?: HttpContext): Observable<Array<BookingRm>> {\n    return this.listBooking$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<BookingRm>>): Array<BookingRm> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listBooking()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking$Response(params: ListBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BookingRm>>> {\n    return listBooking(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `listBooking$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listBooking(params: ListBooking$Params, context?: HttpContext): Observable<Array<BookingRm>> {\n    return this.listBooking$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<BookingRm>>): Array<BookingRm> => r.body)\n    );\n  }\n\n  /** Path part for operation `cancelBooking()` */\n  static readonly CancelBookingPath = '/Booking';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `cancelBooking()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cancelBooking$Response(params?: CancelBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return cancelBooking(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `cancelBooking$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cancelBooking(params?: CancelBooking$Params, context?: HttpContext): Observable<void> {\n    return this.cancelBooking$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}