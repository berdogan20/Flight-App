{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegisterPassengerComponent = class RegisterPassengerComponent {\n  constructor(passengerService, fb, authService, router) {\n    this.passengerService = passengerService;\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.form = this.fb.group({\n      email: ['', Validators.compose([Validators.required, Validators.email, Validators.minLength(3), Validators.maxLength(50)])],\n      firstName: ['', Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(35)])],\n      lastName: ['', Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(35)])],\n      isFemale: [true, Validators.required]\n    });\n    this.login = () => {\n      if (this.form.invalid) {\n        return;\n      }\n      this.authService.loginUser({\n        email: this.form.get('email')?.value\n      });\n      this.router.navigate(['/search-flights']);\n    };\n  }\n  register() {\n    console.log(this.form.value);\n    this.passengerService.registerPassenger({\n      body: this.form.value\n    }).subscribe(_ => this.authService.loginUser({\n      email: this.form.get('email')?.value\n    }), console.error);\n  }\n  checkPassenger() {\n    const params = {\n      email: this.form.get('email')?.value\n    };\n    this.passengerService.findPassenger(params).subscribe(this.login, e => {\n      if (e.status != 404) console.error(e);\n    });\n  }\n};\nRegisterPassengerComponent = __decorate([Component({\n  selector: 'app-register-passenger',\n  templateUrl: './register-passenger.component.html',\n  styleUrls: ['./register-passenger.component.css']\n})], RegisterPassengerComponent);\nexport { RegisterPassengerComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAAsBC,UAAU,QAAQ,gBAAgB;AASjD,IAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EAErCC,YAAoBC,gBAAkC,EAC5CC,EAAe,EACfC,WAAwB,EACxBC,MAAc;IAHJ,qBAAgB,GAAhBH,gBAAgB;IAC1B,OAAE,GAAFC,EAAE;IACF,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IAEhB,SAAI,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MACnBC,KAAK,EAAE,CAAC,EAAE,EAAER,UAAU,CAACS,OAAO,CAAC,CAACT,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACQ,KAAK,EAAER,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EAAEX,UAAU,CAACY,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAC3HC,SAAS,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACS,OAAO,CAAC,CAACT,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EAAEX,UAAU,CAACY,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAC7GE,QAAQ,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACS,OAAO,CAAC,CAACT,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EAAEX,UAAU,CAACY,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAC5GG,QAAQ,EAAE,CAAC,IAAI,EAAEf,UAAU,CAACU,QAAQ;KACrC,CAAC;IAyBM,UAAK,GAAG,MAAK;MAEnB,IAAI,IAAI,CAACM,IAAI,CAACC,OAAO,EAAE;QACrB;;MAGF,IAAI,CAACZ,WAAW,CAACa,SAAS,CAAC;QAAEV,KAAK,EAAE,IAAI,CAACQ,IAAI,CAACG,GAAG,CAAC,OAAO,CAAC,EAAEC;MAAM,CAAE,CAAC;MACrE,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAAC;IAC3C,CAAC;EAxC6B;EAU9BC,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,IAAI,CAACI,KAAK,CAAC;IAE5B,IAAI,CAACjB,gBAAgB,CAACsB,iBAAiB,CAAC;MAAEC,IAAI,EAAE,IAAI,CAACV,IAAI,CAACI;IAAK,CAAE,CAAC,CAC/DO,SAAS,CAACC,CAAC,IAAI,IAAI,CAACvB,WAAW,CAACa,SAAS,CAAC;MAAEV,KAAK,EAAE,IAAI,CAACQ,IAAI,CAACG,GAAG,CAAC,OAAO,CAAC,EAAEC;IAAM,CAAE,CAAC,EACrFG,OAAO,CAACM,KAAK,CAAC;EAClB;EAEAC,cAAc;IACZ,MAAMC,MAAM,GAAG;MAAEvB,KAAK,EAAE,IAAI,CAACQ,IAAI,CAACG,GAAG,CAAC,OAAO,CAAC,EAAEC;IAAM,CAAE;IAExD,IAAI,CAACjB,gBAAgB,CAClB6B,aAAa,CAACD,MAAM,CAAC,CACrBJ,SAAS,CACR,IAAI,CAACM,KAAK,EACVC,CAAC,IAAG;MACF,IAAIA,CAAC,CAACC,MAAM,IAAI,GAAG,EACjBZ,OAAO,CAACM,KAAK,CAACK,CAAC,CAAC;IACpB,CAAC,CACF;EACL;CAYD;AA/CYjC,0BAA0B,eALtCF,SAAS,CAAC;EACTqC,QAAQ,EAAE,wBAAwB;EAClCC,WAAW,EAAE,qCAAqC;EAClDC,SAAS,EAAE,CAAC,oCAAoC;CACjD,CAAC,GACWrC,0BAA0B,CA+CtC;SA/CYA,0BAA0B","names":["Component","Validators","RegisterPassengerComponent","constructor","passengerService","fb","authService","router","group","email","compose","required","minLength","maxLength","firstName","lastName","isFemale","form","invalid","loginUser","get","value","navigate","register","console","log","registerPassenger","body","subscribe","_","error","checkPassenger","params","findPassenger","login","e","status","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Projects/Flights/Flights/ClientApp/src/app/register-passenger/register-passenger.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { PassengerService } from './../api/services/passenger.service';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from '../auth/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register-passenger',\n  templateUrl: './register-passenger.component.html',\n  styleUrls: ['./register-passenger.component.css']\n})\nexport class RegisterPassengerComponent {\n\n  constructor(private passengerService: PassengerService,\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router  ) { }\n\n  form = this.fb.group({\n    email: ['', Validators.compose([Validators.required, Validators.email, Validators.minLength(3), Validators.maxLength(50)])],\n    firstName: ['', Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(35)])],\n    lastName: ['', Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(35)])],\n    isFemale: [true, Validators.required]\n  });\n\n\n  register() {\n    console.log(this.form.value);\n\n    this.passengerService.registerPassenger({ body: this.form.value })\n      .subscribe(_ => this.authService.loginUser({ email: this.form.get('email')?.value! }),\n      console.error);\n  }\n\n  checkPassenger(): void {\n    const params = { email: this.form.get('email')?.value! }\n\n    this.passengerService\n      .findPassenger(params)\n      .subscribe(\n        this.login,\n        e => {\n          if (e.status != 404)\n            console.error(e)\n        }\n      )\n  }\n\n  private login = () => {\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.authService.loginUser({ email: this.form.get('email')?.value! });\n    this.router.navigate(['/search-flights']);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}